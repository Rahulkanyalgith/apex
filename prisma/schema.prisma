generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ReachUs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  mobileNo  String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Committee {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  price      Int         @default(0)
  portfolios Portfolio[]
  coupons    Coupon[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Portfolio {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  committee   Committee? @relation(fields: [committeeId], references: [id])
  committeeId String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Coupon {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  code        String     @unique
  percentage  Int        @default(0)
  committee   Committee? @relation(fields: [committeeId], references: [id])
  committeeId String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Register {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String
  mobileNo               String
  institutionName        String
  classYear              String
  munExperience          String
  age                    String
  committeeName          String
  portfolioRef1          String
  portfolioRef2          String?
  portfolioRef3          String?
  ref                    String?
  couponCode             String?
  couponPercentage       Int?
  couponAmount           Int?
  paymentMethod          String
  cardDetails            CardDetails?          @relation(fields: [cardDetailsId], references: [id])
  bankPaymentDetails     BankPaymentDetails?   @relation(fields: [bankPaymentDetailsId], references: [id])
  walletPaymentDetails   WalletPaymentDetails? @relation(fields: [walletPaymentDetailsId], references: [id])
  UpiPaymentDetails      UpiPaymentDetails?    @relation(fields: [upiPaymentDetailsId], references: [id])
  razorpayOrderId        String
  razorpayPaymentId      String
  razorpaySignature      String
  paymentAmount          Int
  paymentStatus          String
  cardDetailsId          String?               @db.ObjectId
  bankPaymentDetailsId   String?               @db.ObjectId
  walletPaymentDetailsId String?               @db.ObjectId
  upiPaymentDetailsId    String?               @db.ObjectId
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
}

model CardDetails {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  paymentId  String?
  last4No    String?
  network    String?
  type       String?
  cardholder String?
  Register   Register[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model BankPaymentDetails {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String?
  Register      Register[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model WalletPaymentDetails {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String?
  Register      Register[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model UpiPaymentDetails {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String?
  vpa           String?
  Register      Register[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
